package application;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;

import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

public class RequestListener {
	private static InetAddress serverIPAddress;
	private static int serverSocketPort;
	private static ServerSocket serverSocket;
	private static Socket socket;
	private static AtomicBoolean subServerIsRunning=new AtomicBoolean(false);
	private static ObjectOutputStream oos;
	private static ObjectInputStream ois;
	private static DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
	
	@FXML
	private TextField MyIPATextField;
	private String myIPA;
	private InetAddress myInetAddress;
	
	@FXML
	private TextField MySPTextField;
	private int mySP;
	
	@FXML
	private TextArea AwaitingTransactionsTextArea;
	
	@FXML
	private TextArea CompletedTransactionsTextArea;
	
	@FXML
	private TextArea StocksTextArea;
	
	@FXML
	private TextArea LogsTextArea;
	
	public static LinkedBlockingQueue<Vector<String>> requestQueue = new LinkedBlockingQueue<Vector<String>>();	//blocking queue for connection requests that come from clients and subservers (ipa, port, type, operation, username/stockname, password/amount)	
	public static LinkedBlockingQueue<Vector<String>> stocksQueue=new LinkedBlockingQueue<Vector<String>>();		//queue in which stocks are stored (name, price, subserver ipa, subserver port)

	RequestListener(String ipa, int sp, TextArea Logs, TextArea Stocks, TextArea Awaiting, TextArea Compl){
		
	}
}
