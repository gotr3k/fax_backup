package application;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicBoolean;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

public class RequestServant extends Thread{
	private Socket socket;
	private static LinkedBlockingQueue<Vector<String>> requests;
	private static LinkedBlockingQueue<Vector<String>> clients;
	private static LinkedBlockingQueue<Vector<String>> subservers;
	private static LinkedBlockingQueue<Vector<String>> stocks;
	private static double clientRR;
	private static double subserverRR;
	private ObjectOutputStream oos;
	private ObjectInputStream ois;
	static Semaphore semaphoreSSTA=new Semaphore(1);
	static Semaphore semaphoreSLTA=new Semaphore(1);
	static Semaphore semaphoreCTA=new Semaphore(1);
	
	private static DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		
	@FXML
	private static TextArea SubserversTextArea;
	
	@FXML
	private static TextArea ServerLogsTextArea;
	
	@FXML
	private static TextArea ClientsTextArea;
	
	@FXML
	private static TextArea StocksTextArea;
	
	public RequestServant(double cRR, double sRR, Socket s, LinkedBlockingQueue<Vector<String>> req, LinkedBlockingQueue<Vector<String>> cli, LinkedBlockingQueue<Vector<String>> sub, LinkedBlockingQueue<Vector<String>> stk, TextArea ssta, TextArea slta, TextArea cta, TextArea sta) {
		clientRR=cRR;
		subserverRR=sRR;
		this.socket=s;
		requests=req; //CHECK
		clients=cli; //CHECK
		subservers=sub; //CHECK
		stocks=stk; //CHECK
		SubserversTextArea=ssta;
		ServerLogsTextArea=slta;
		ClientsTextArea=cta;
		StocksTextArea=sta;
	}
	
	@Override
	public void run() {
        try {
        	oos = new ObjectOutputStream(socket.getOutputStream());
        	ois = new ObjectInputStream(socket.getInputStream());

        	Vector<String> temp = (Vector<String>)ois.readObject();	
        	String operation=temp.remove(0);				//first string is always name of the operation
        	
        	semaphoreSLTA.acquireUninterruptibly();
    		ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Accepted '"+operation+"' request from "
    				+socket.getInetAddress().toString().substring(1, socket.getInetAddress().toString().length())
    				+"/"+socket.getPort()+"\n\n");
    		semaphoreSLTA.release();
        			
        	switch(operation) {
        	case "client connect":{
        			if(RequestServant.clients.offer(temp)) {	//if client[username, password, ???clientServerSocket???] can be added to lbq clients
        				Platform.runLater(()->{
        					semaphoreCTA.acquireUninterruptibly();
        					ClientsTextArea.appendText(temp.elementAt(0)+"\n");
        					semaphoreCTA.release();
        				});
        				String succ="successful";
        				oos.writeObject(succ);
        				oos.flush();
        				
        				Platform.runLater(()->{//remove later
        					semaphoreSLTA.acquireUninterruptibly();
        					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Sent 'successful' connect to "
        							+socket.getInetAddress().toString().substring(1, socket.getInetAddress().toString().length())
        							+"/"+socket.getPort()+"\n\n");
        					semaphoreSLTA.release();
        				});
        				while(RequestServant.clients.contains(temp)) {
        					sleep((int)clientRR*1000);
        					//StocksTextArea.clear();
        					oos.writeObject("begin");
        					oos.flush();
        					stocks.forEach(row->{
        						//StocksTextArea.appendText(row.elementAt(0)+"\t"+row.elementAt(1)+"\t"+row.elementAt(2)+"\t"+row.elementAt(3)+"\n");
        						try {
        							String sender=row.elementAt(0)+"\t\t"+row.elementAt(1)+"\t\t\t"+row.elementAt(2)+"\t\t"+row.elementAt(3)+"\n";
									oos.writeObject(sender);
									oos.flush();
        						} catch (Exception e) {
        							semaphoreSLTA.acquireUninterruptibly();
                					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Can't send stocks to "
                							+socket.getInetAddress().toString().substring(1, socket.getInetAddress().toString().length())
                							+"/"+socket.getPort()+"\n\n");
                					semaphoreSLTA.release();
								}        					
    						});
        					//oos.writeObject("end");
        					//oos.flush();
        				}
        			}
        			else {
        				oos.writeObject("not successful");
        				oos.flush();
    				}
        			oos.close();
    				ois.close();
    				socket.close();
        			break;
        		}
        	case "client disconnect":{
				if(RequestServant.clients.remove(temp)) {
					Platform.runLater(()->{
						semaphoreCTA.acquireUninterruptibly();
						ClientsTextArea.clear();
						clients.forEach(row->{
							ClientsTextArea.appendText(row.elementAt(0)+"\n");
						});
						semaphoreCTA.release();
					});
					
    				oos.writeObject("successful");
    				oos.flush();
    				
    				Platform.runLater(()->{//remove later
    				semaphoreSLTA.acquireUninterruptibly();
    				ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Sent 'successful disconnect' to "
    						+socket.getInetAddress().toString().substring(1, socket.getInetAddress().toString().length())
    						+"/"+socket.getPort()+"\n\n");
    				semaphoreSLTA.release();
    				});
    			}
				else {
					oos.writeObject("not successful");
    				oos.flush();
    				Platform.runLater(()->{
    					semaphoreSLTA.acquireUninterruptibly();
    					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Sent 'cant disconnect' to "
    							+socket.getInetAddress().toString().substring(1, socket.getInetAddress().toString().length())
    							+"/"+socket.getPort()+"\n\n");
    					semaphoreSLTA.release();
    				});
				}
				oos.close();
				ois.close();
				socket.close();
    			break;
        		
        	}
        		case "subserver connect":{
        			if(RequestServant.subservers.offer(temp)) {	//if subserver[ipa, sp] can be added to lbq subservers
        				
        				oos.writeObject("successful");
        				oos.flush();
        				
    					Platform.runLater(()->{
    						semaphoreSSTA.acquireUninterruptibly();
    						SubserversTextArea.clear();     					
    						RequestServant.subservers.forEach(subserver->{
    							SubserversTextArea.appendText(subserver.elementAt(0)+"/"+subserver.elementAt(1)+"\n");
    							RequestServant.stocks.forEach(stock->{
        							if(subserver.elementAt(0)==stock.elementAt(4))
        								SubserversTextArea.appendText(stock.elementAt(0)+"\n");
        						});
    							SubserversTextArea.appendText("\n");
    						});
    						semaphoreSSTA.release();
    					});
        				
        				Platform.runLater(()->{//remove later
        					semaphoreSLTA.acquireUninterruptibly();
        					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Sent 'successful' connect to "
        							+socket.getInetAddress().toString().substring(1)
        							+"/"+socket.getPort()+"\n\n");
        					semaphoreSLTA.release();
        				});
        				
        				AtomicBoolean done=new AtomicBoolean(false);
        				while(!done.get()) {
        					done.set(true);
        					//LOAD BALANCING
        					int numberOfStocks=RequestServant.stocks.size();
        					int numberOfSubservers=RequestServant.subservers.size();
        				
        					LinkedBlockingQueue<Vector<String>> helperQueue=new LinkedBlockingQueue<Vector<String>>();
        					Vector<String> subserverIPAs=new Vector<String>();
        					RequestServant.subservers.forEach(row->{
        						subserverIPAs.add(row.elementAt(0));
        					});
        				
        					int cnt=0;
        					Iterator<Vector<String>> stocksIterator=RequestServant.stocks.iterator();
        				
        					Vector<String> helperVector=new Vector<String>();
        				
        					while(numberOfStocks>0) {
        						helperVector=stocksIterator.next();
        						helperVector.set(4,subserverIPAs.elementAt(cnt));
        						cnt=(cnt+1)%numberOfSubservers;
        						numberOfStocks--;
        						helperQueue.offer(helperVector);
        					}
        				
        					RequestServant.stocks=helperQueue;
        				
        					RequestServant.subservers.forEach(subserver->{//receive buy and sell requests from all subservers     						
        						try {
        							Socket socketSubserver=new Socket(InetAddress.getByName(subserver.elementAt(0)), Integer.parseInt(subserver.elementAt(1)));
    								ObjectOutputStream oosSubserver = new ObjectOutputStream(socketSubserver.getOutputStream());
    								ObjectInputStream oisSubserver = new ObjectInputStream(socketSubserver.getInputStream());
        						
        							oosSubserver.writeObject("get requests");
        							oosSubserver.flush();
        							
        							while(!socketSubserver.isClosed()) {
        								Vector<String> receiver = (Vector<String>)ois.readObject();	
        								if(!receiver.get(0).equalsIgnoreCase("end"))
        									RequestServant.requests.offer(receiver);
        								else {
        									oosSubserver.close();
        									oisSubserver.close();
        									socketSubserver.close();
        								}
        							}
        						} catch (Exception ex) {
        							semaphoreSLTA.acquireUninterruptibly();
                					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Cannot get buy and sell requests from "
                							+subserver.elementAt(0)
                							+"/"+subserver.elementAt(1)+"\n\n");
                					semaphoreSLTA.release();
        							done.set(false);
        						}
        					});
        				
        					
        					//send stocks and queues to subservers (empty requests queue after this)
        					RequestServant.subservers.forEach(subserver->{
        						try {
        							Socket socketSubserver=new Socket(InetAddress.getByName(subserver.elementAt(0)), Integer.parseInt(subserver.elementAt(1)));
    								ObjectOutputStream oosSubserver = new ObjectOutputStream(socketSubserver.getOutputStream());
    								ObjectInputStream oisSubserver = new ObjectInputStream(socketSubserver.getInputStream());     							
        							RequestServant.stocks.forEach(stock->{
            							if(subserver.elementAt(0)==stock.elementAt(4)) {
            								Vector<String> temp3=new Vector<String>();
            			        			temp3.add("client connect");
            			        			temp3.add(this.username);
            			        			temp3.add(this.password);	//should be encrypted obviously
            							}
            								//send stock values
            								//send buy and sell requests
            						});
        							//send end
        						}	catch (Exception ex){
        							semaphoreSLTA.acquireUninterruptibly();
                					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Cannot send current stocks to "
                							+subserver.elementAt(0)
                							+"/"+subserver.elementAt(1)+"\n\n");
        							done.set(false);
        						}   							
    						});
        				}
        			}
        			else {
        				oos.writeObject("not successful");
        				oos.flush();
    				}
        			oos.close();
    				ois.close();
    				socket.close();
        			break;
        		}
        	}
        	
		} catch (Exception ex) {
			Platform.runLater(()->{
				semaphoreSLTA.acquireUninterruptibly();
				ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Error! Can't establish communication with "
						+socket.getInetAddress().toString().substring(1, socket.getInetAddress().toString().length())
						+"/"+socket.getPort()+"\nError: "+ex.toString()+"\n\n");
				semaphoreSLTA.release();
			});
		}
	}
}
