package application;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

public class RequestListener extends Thread{
	private static InetAddress serverIPAddress;
	private static int serverSocketPort;
	private static ServerSocket serverSocket;
	private static Socket socket;
	private static AtomicBoolean serverIsRunning=new AtomicBoolean(false);
	private static ObjectOutputStream oos;
	private static ObjectInputStream ois;
	private static DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
	
	@FXML
	private static TextField ClientRefreshRateTextField;
	
	@FXML
	private static TextField SubserverRefreshRateTextField;

	@FXML
	private static TextField ServerIPAddressTextField;

	@FXML
	private static TextField ServerSocketPortTextField;

	@FXML
	private static TextArea SubserversTextArea;
	
	@FXML
	private static TextArea ServerLogsTextArea;
	
	@FXML
	private static TextArea ClientsTextArea;
	
	@FXML
	private static Button StartServerButton;
	
	@FXML
	private static Button StopServerButton;
	
	public static LinkedBlockingQueue<Vector<String>> requestQueue = new LinkedBlockingQueue<Vector<String>>();	//blocking queue for connection requests that come from clients and subservers (ipa, port, type, operation, username/stockname, password/amount)	
	public static LinkedBlockingQueue<Vector<String>> stocksQueue=new LinkedBlockingQueue<Vector<String>>();		//queue in which stocks are stored (name, price, subserver ipa, subserver port)
	public static LinkedBlockingQueue<Vector<String>> clientQueue=new LinkedBlockingQueue<Vector<String>>();		//queue in which clients are stored (ipa, port, user, pass)
	public static LinkedBlockingQueue<Vector<String>> subserverQueue=new LinkedBlockingQueue<Vector<String>>(); 	//queue in which subservers are stored (ipa, port)
	
	RequestListener(String ipa, int port, TextField ClientRR, TextField SubserverRR, TextField ServerIPA, TextField ServerPort, TextArea Subservers, TextArea Clients, TextArea ServerLogs, Button Start, Button Stop) {
		try {
			serverIPAddress=InetAddress.getByName(ipa);
		} catch (UnknownHostException e) {
			ServerLogs.appendText("["+dateFormat.format(new Date())+"] Cannot convert IP address to InetAddress Object!\n"
					+"Error: "+e.toString()+"\n\n");
		}
        serverSocketPort = port;
        ClientRefreshRateTextField=ClientRR;
        SubserverRefreshRateTextField=SubserverRR;
        ServerIPAddressTextField=ServerIPA;
        ServerSocketPortTextField=ServerPort;
        SubserversTextArea = Subservers;
        ServerLogsTextArea = ServerLogs;
        ClientsTextArea = Clients;
        StartServerButton=Start;
        StopServerButton=Stop;
    }
	
	private static void setUI() {
		StopServerButton.setFocusTraversable(serverIsRunning.get());
		StopServerButton.setVisible(serverIsRunning.get());
		StartServerButton.setFocusTraversable(!serverIsRunning.get());
		StartServerButton.setVisible(!serverIsRunning.get());
		ClientRefreshRateTextField.setFocusTraversable(!serverIsRunning.get());
		ClientRefreshRateTextField.setEditable(!serverIsRunning.get());
		SubserverRefreshRateTextField.setFocusTraversable(!serverIsRunning.get());
		SubserverRefreshRateTextField.setEditable(!serverIsRunning.get());
		ServerIPAddressTextField.setFocusTraversable(!serverIsRunning.get());
		ServerIPAddressTextField.setEditable(!serverIsRunning.get());
		ServerSocketPortTextField.setFocusTraversable(!serverIsRunning.get());
		ServerSocketPortTextField.setEditable(!serverIsRunning.get());
	}
	
	@Override
	public void run() {
		
	}
	
/*	static void listenToRequests(TextField ClientRR, TextField SubserverRR, TextField ServerIPA, TextField ServerPort, TextArea Subservers, TextArea Clients, TextArea ServerLogs, Button Start, Button Stop) {
		Runnable r=()->{
			serverIsRunning.set(true);
			try {
				serverSocket=new ServerSocket(serverSocketPort, 1, serverIPAddress);
				Platform.runLater(()->{
				ServerLogs.appendText("["+dateFormat.format(new Date())+"] Created server socket on "
						+serverSocket.getInetAddress().toString().substring(1, serverSocket.getInetAddress().toString().length())
						+"/"+serverSocket.getLocalPort()+"\n\n");
				ServerLogs.appendText("["+dateFormat.format(new Date())+"] SERVER IS ONLINE\n\n");
				Stop.setFocusTraversable(true);
				Stop.setVisible(true);
				Start.setFocusTraversable(false);
				Start.setVisible(false);
				ClientRR.setFocusTraversable(false);
				ClientRR.setEditable(false);
				SubserverRR.setFocusTraversable(false);
				SubserverRR.setEditable(false);
				ServerIPA.setFocusTraversable(false);
				ServerIPA.setEditable(false);
				ServerPort.setFocusTraversable(false);
				ServerPort.setEditable(false);
				});
			} catch (IOException e) {
				serverIsRunning.set(false);
				Platform.runLater(()->{
					ServerLogs.appendText("["+dateFormat.format(new Date())+"] Cannot create server socket!\n"
							+"Error: "+e.toString()+"\n\n");
					ServerLogs.appendText("["+dateFormat.format(new Date())+"] SERVER IS OFFLINE\n\n");
					Stop.setFocusTraversable(false);
					Stop.setVisible(false);
					Start.setFocusTraversable(true);
					Start.setVisible(true);
					ClientRR.setFocusTraversable(true);
					ClientRR.setEditable(true);
					SubserverRR.setFocusTraversable(true);
					SubserverRR.setEditable(true);
					ServerIPA.setFocusTraversable(true);
					ServerIPA.setEditable(true);
					ServerPort.setFocusTraversable(true);
					ServerPort.setEditable(true);
				});
			}
			
			while(serverIsRunning.get()) {
				try {
					if(serverIsRunning.get())
						ServerLogs.appendText("["+dateFormat.format(new Date())+"] Listening for requests...\n\n");
					socket=serverSocket.accept();
					if(serverIsRunning.get()) {
						RequestServant reqServant=new RequestServant(Double.parseDouble(ClientRR.getText()), Double.parseDouble(SubserverRR.getText()), socket, requestQueue, clientQueue, subserverQueue, stocksQueue, Subservers, ServerLogs, Clients);
						reqServant.start();
					}
				} catch (IOException e) {
					if(serverIsRunning.get())
						ServerLogs.appendText("["+dateFormat.format(new Date())+"] Cannot establish connection!\n"
								+"Error: "+e.toString()+"\n\n");
				}
			}
		};
		
		Thread t=new Thread(r);
		t.start();
	}
*/
	
	public void listenToRequests() {
		Runnable r=()->{
			serverIsRunning.set(true);
			try {
				serverSocket=new ServerSocket(serverSocketPort, 1, serverIPAddress);
				Platform.runLater(()->{
				ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Created server socket on "
						+serverSocket.getInetAddress().toString().substring(1, serverSocket.getInetAddress().toString().length())
						+"/"+serverSocket.getLocalPort()+"\n\n");
				ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] SERVER IS ONLINE\n\n");
				setUI();
				});
			} catch (IOException e) {
				serverIsRunning.set(false);
				Platform.runLater(()->{
					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Cannot create server socket!\n"
							+"Error: "+e.toString()+"\n\n");
					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] SERVER IS OFFLINE\n\n");
					setUI();
				});
			}
			
			while(serverIsRunning.get()) {
				try {
					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Listening for requests...\n\n");
					socket=serverSocket.accept();
					RequestServant reqServant=new RequestServant(Double.parseDouble(ClientRefreshRateTextField.getText()), Double.parseDouble(SubserverRefreshRateTextField.getText()), socket, requestQueue, clientQueue, subserverQueue, stocksQueue, SubserversTextArea, ServerLogsTextArea, ClientsTextArea);
					reqServant.start();
				} catch (IOException e) {
					if(serverIsRunning.get())
					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Cannot establish connection!\n"
							+"Error: "+e.toString()+"\n\n");
				}
			}
		};
		
		Thread t=new Thread(r);
		t.start();
	}
	
/*	static void stopListeningToRequests(TextField ClientRR, TextField SubserverRR, TextField ServerIPA, TextField ServerPort, TextArea Subservers, TextArea Clients, TextArea ServerLogs, Button Start, Button Stop) {//needs to be multithreaded, remove static from variables
		Runnable r=()->{
			serverIsRunning.set(false);
			clientQueue.clear();
			try {
				if(!serverIsRunning.get()) {
					serverSocket.close();
					//socket=null;
					//serverSocket=null;
				
					Platform.runLater(()->{
						ServerLogs.appendText("["+dateFormat.format(new Date())+"] Closed server socket on "
								+serverSocket.getInetAddress().toString().substring(1, serverSocket.getInetAddress().toString().length())
								+"/"+serverSocket.getLocalPort()+"\n\n");
						ServerLogs.appendText("["+dateFormat.format(new Date())+"] SERVER IS OFFLINE\n\n");
						Stop.setFocusTraversable(false);
						Stop.setVisible(false);
						Start.setFocusTraversable(true);
						Start.setVisible(true);
						ClientRR.setFocusTraversable(true);
						ClientRR.setEditable(true);
						SubserverRR.setFocusTraversable(true);
						SubserverRR.setEditable(true);
						ServerIPA.setFocusTraversable(true);
						ServerIPA.setEditable(true);
						ServerPort.setFocusTraversable(true);
						ServerPort.setEditable(true);
					});
				}
			} catch (IOException e) {
				serverIsRunning.set(true);
				Platform.runLater(()->{
					ServerLogs.appendText("["+dateFormat.format(new Date())+"] Cannot close server socket!\n"
							+"Error: "+e.toString()+"\n\n");
					ServerLogs.appendText("["+dateFormat.format(new Date())+"] SERVER IS STILL ONLINE\n\n");	
					Stop.setFocusTraversable(true);
					Stop.setVisible(true);
					Start.setFocusTraversable(false);
					Start.setVisible(false);
					ClientRR.setFocusTraversable(false);
					ClientRR.setEditable(false);
					SubserverRR.setFocusTraversable(false);
					SubserverRR.setEditable(false);
					ServerIPA.setFocusTraversable(false);
					ServerIPA.setEditable(false);
					ServerPort.setFocusTraversable(false);
					ServerPort.setEditable(false);
				});
			}
		};
		
		Thread t=new Thread(r);
		t.start();
	}
}*/
	
	public void stopListeningToRequests() {
		Runnable r=()->{
			serverIsRunning.set(false);
			clientQueue.clear();
			subserverQueue.clear();
			try {
				if(!serverIsRunning.get()) {
					serverSocket.close();				
					Platform.runLater(()->{
						ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Closed server socket on "
								+serverSocket.getInetAddress().toString().substring(1, serverSocket.getInetAddress().toString().length())
								+"/"+serverSocket.getLocalPort()+"\n\n");
						ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] SERVER IS OFFLINE\n\n");
						setUI();
					});
				}
			} catch (IOException e) {
				serverIsRunning.set(true);
				Platform.runLater(()->{
					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] Cannot close server socket!\n"
							+"Error: "+e.toString()+"\n\n");
					ServerLogsTextArea.appendText("["+dateFormat.format(new Date())+"] SERVER IS STILL ONLINE\n\n");	
					setUI();
				});
			}
		};
		
		Thread t=new Thread(r);
		t.start();
	}
}
