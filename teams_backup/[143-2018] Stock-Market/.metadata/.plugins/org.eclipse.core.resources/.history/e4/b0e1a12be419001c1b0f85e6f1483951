package application;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

public class StockUpdater extends Thread{
	private Socket socket;
	private ObjectOutputStream oos;
	private ObjectInputStream ois;
	
	private AtomicBoolean clientIsRunning=new AtomicBoolean(true);
	@FXML
	private TextArea StocksTextArea;
	@FXML
	private TextArea LogsTextArea;
	@FXML
	private Button BuyButton;
	@FXML
	private Button SellButton;
	@FXML
	private Button ConnectButton;
	@FXML
	private Button DisconnectButton;
	@FXML
	private TextField UsernameTextField;
	@FXML
	private TextField PasswordTextField;
	@FXML
	private TextField ServerIPATextField;
	@FXML
	private TextField ServerSPTextField;
	
	private static DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
	
	StockUpdater(Socket socket, ObjectOutputStream oos, ObjectInputStream ois, TextArea StocksTextArea, Button Buy, Button Sell, Button Connect, Button Disconnect, TextField Username, TextField Password, TextField ServerIPA, TextField ServerSP, TextArea Logs){
		this.socket=socket;
		this.oos=oos;
		this.ois=ois;
		this.StocksTextArea=StocksTextArea;
		this.BuyButton=Buy;
		this.SellButton=Sell;
		this.ConnectButton=Connect;
		this.DisconnectButton=Disconnect;
		this.UsernameTextField=Username;
		this.PasswordTextField=Password;
		this.ServerIPATextField=ServerIPA;
		this.ServerSPTextField=ServerSP;
		this.LogsTextArea=Logs;
	}
	
	private void setUI() {
		this.BuyButton.setFocusTraversable(clientIsRunning.get());
		this.BuyButton.setVisible(clientIsRunning.get());
		this.SellButton.setFocusTraversable(clientIsRunning.get());
		this.SellButton.setVisible(clientIsRunning.get());
		this.DisconnectButton.setFocusTraversable(clientIsRunning.get());
		this.DisconnectButton.setVisible(clientIsRunning.get());
		this.ConnectButton.setFocusTraversable(!clientIsRunning.get());
		this.ConnectButton.setVisible(!clientIsRunning.get());
		this.UsernameTextField.setFocusTraversable(!clientIsRunning.get());
		this.UsernameTextField.setEditable(!clientIsRunning.get());
		this.PasswordTextField.setFocusTraversable(!clientIsRunning.get());
		this.PasswordTextField.setEditable(!clientIsRunning.get());
		this.ServerIPATextField.setFocusTraversable(!clientIsRunning.get());
		this.ServerIPATextField.setEditable(!clientIsRunning.get());
		this.ServerSPTextField.setFocusTraversable(!clientIsRunning.get());
		this.ServerSPTextField.setEditable(!clientIsRunning.get());
	}
	
	public void run() {
		StocksTextArea.clear();
		clientIsRunning.set(true);
		while(!socket.isClosed()) {
			try {
				StocksTextArea.appendText((String)ois.readObject()+"\n");
			}  catch (Exception ex) {
				StocksTextArea.clear();
				StocksTextArea.appendText(ex.toString()+"\n");
				try {
					if(!socket.isOutputShutdown())
						LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Disconnected: Cannot contact the server\n\n");
					oos.close();
					ois.close();
					socket.close();
					
				} catch (Exception exx) {
					StocksTextArea.clear();
					StocksTextArea.appendText(exx.toString()+"\n");
					//clientIsRunning.set(true);
				}
			}
		}
		clientIsRunning.set(false);
		setUI();
		
	}
}