package application;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

public class Controller {
	static final int upperBoundSP=65535;				//upper bound for socket ports
	static final int lowerBoundSP=49512;				//lower bound for socket ports
	
	@FXML
	private TextField MyIPATextField;
	private String myIPA;
	private InetAddress myInetAddress;
	
	@FXML
	private TextField MySPTextField;
	private int mySP;
	
	@FXML
	private TextField ServerIPATextField;
	private String serverIPA;
	
	@FXML
	private TextField ServerSPTextField;
	private int serverSP;
	
	@FXML
	private Button StartSubserverButton;
	
	@FXML
	private Button StopSubserverButton;
	
	@FXML
	private TextArea AwaitingTransactionsTextArea;
	
	@FXML
	private TextArea CompletedTransactionsTextArea;
	
	@FXML
	private TextArea StocksTextArea;
	
	@FXML
	private TextArea LogsTextArea;
	
	private AtomicBoolean subserverIsRunning=new AtomicBoolean(false);
	
	private static DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
	
	private Socket socket;
	private ObjectOutputStream oos;
	private ObjectInputStream ois;
	
	private RequestListener reqListener;
	
	private void textChecker() {
		this.MyIPATextField.setText(this.myIPA);
		this.MySPTextField.setText(String.valueOf(this.mySP));
		this.ServerIPATextField.setText(this.serverIPA);
		this.ServerSPTextField.setText(String.valueOf(this.serverSP));
	}
	
	public void setUI() {
		this.MyIPATextField.setFocusTraversable(!this.subserverIsRunning.get());
		this.MySPTextField.setFocusTraversable(!this.subserverIsRunning.get());
		this.ServerIPATextField.setFocusTraversable(!this.subserverIsRunning.get());
		this.ServerSPTextField.setFocusTraversable(!this.subserverIsRunning.get());
		
		this.StartSubserverButton.setFocusTraversable(!this.subserverIsRunning.get());
		this.StartSubserverButton.setVisible(!this.subserverIsRunning.get());
		
		this.StopSubserverButton.setFocusTraversable(this.subserverIsRunning.get());
		this.StopSubserverButton.setVisible(this.subserverIsRunning.get());
	}
	
	
	@FXML
    public void initialize() {							//on form load
		this.myIPA="127.0.0.2";
		this.MyIPATextField.setText(this.myIPA);
		
		this.mySP=50000;
		this.MySPTextField.setText(String.valueOf(this.mySP));
		
		this.serverIPA="127.0.0.1";
		this.ServerIPATextField.setText(this.serverIPA);
		
		this.serverSP=50000;
		this.ServerSPTextField.setText(String.valueOf(this.serverSP));
	
		//set up listeners for all text fields and buttons which will check validity of their peers (useful when user uses mouse or tab to change focus)
		MyIPATextField.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
		
		MySPTextField.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
		
		ServerIPATextField.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
		
		ServerSPTextField.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
		
		StartSubserverButton.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
	
		StopSubserverButton.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
		
		AwaitingTransactionsTextArea.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
		
		CompletedTransactionsTextArea.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
		
		StocksTextArea.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
		
		LogsTextArea.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if(newVal) {
				this.textChecker();
			}
		});
	}
	
	public void setMyIPA(){
		try {
			String newIPA=MyIPATextField.getText();
			String pattern = "^(([0-1]?[0-9]?[0-9]?|2[0-4][0-9]|25[0-5])\\.){3}([0-1]?[0-9]?[0-9]?|2[0-4][0-9]|25[0-5]){1}$";	//regex pattern for checking validity of IP address
			if(newIPA.matches(pattern) && !newIPA.equalsIgnoreCase(this.serverIPA))
				this.myIPA=newIPA;
			else {
				this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Invalid subserver IP address or it matches central server's IP address!\n");
			}
		}
		catch(Exception ex) {
			this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Invalid subserver IP address!\n"
					+"Error: "+ex.toString()+"\n");
		}
		finally {
			this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Subserver IP address set to: "+this.myIPA+"\n\n");
			this.MyIPATextField.setText(this.myIPA);
			this.MyIPATextField.positionCaret(this.MyIPATextField.getLength());
		}
	}
	
	public void setMySP(){	//mozda treba da proverava da nije jednaka serverskom portu?
		try {
			int newSocketPort=Integer.parseInt(this.MySPTextField.getText());
			if(newSocketPort>=lowerBoundSP && newSocketPort<=upperBoundSP)
				this.mySP=newSocketPort;
			else {
				this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Invalid subserver socket port!\n"+""
						+ "Subserver socket port must be between "+lowerBoundSP+" and "+upperBoundSP+"\n");
			}
		}
		catch(Exception ex) {
			this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Invalid subserver socket port!\n"
					+"Error: "+ex.toString()+"\n");
		}
		finally {
			this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Subserver socket port set to: "+this.mySP+"\n\n");
			this.MySPTextField.setText(String.valueOf(this.mySP));
			this.MySPTextField.positionCaret(this.MySPTextField.getLength());
		}
	}
	
	public void setServerIPA(){
		try {
			String newIPA=ServerIPATextField.getText();
			String pattern = "^(([0-1]?[0-9]?[0-9]?|2[0-4][0-9]|25[0-5])\\.){3}([0-1]?[0-9]?[0-9]?|2[0-4][0-9]|25[0-5]){1}$";	//regex pattern for checking validity of IP address
			if(newIPA.matches(pattern) && !newIPA.equalsIgnoreCase(this.myIPA))
				this.serverIPA=newIPA;
			else {
				this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Invalid server IP address or it matches subservers IP address!\n");
			}
		}
		catch(Exception ex) {
			this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Invalid server IP address!\n"
					+"Error: "+ex.toString()+"\n");
		}
		finally {
			this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Server IP address set to: "+this.serverIPA+"\n\n");
			this.ServerIPATextField.setText(this.serverIPA);
			this.ServerIPATextField.positionCaret(this.ServerIPATextField.getLength());
		}
	}
	
	public void setServerSP(){//mozda treba da proverava socket port podservera
		try {
			int newSocketPort=Integer.parseInt(this.ServerSPTextField.getText());
			if(newSocketPort>=lowerBoundSP && newSocketPort<=upperBoundSP)
				this.serverSP=newSocketPort;
			else {
				this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Invalid server socket port!\n"+""
						+ "Server socket port must be between "+lowerBoundSP+" and "+upperBoundSP+"\n");
			}
		}
		catch(Exception ex) {
			this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Invalid server socket port!\n"
					+"Error: "+ex.toString()+"\n");
		}
		finally {
			this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Server socket port set to: "+this.serverSP+"\n\n");
			this.ServerSPTextField.setText(String.valueOf(this.serverSP));
			this.ServerSPTextField.positionCaret(this.ServerSPTextField.getLength());
		}
	}
	
	public void startSubserver(){
		this.subserverIsRunning.set(true);
		this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] STARTING SUBSERVER...\n\n");			
		textChecker();	
		try {
				this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Trying to connect to "+this.serverIPA+"/"+this.serverSP+"\n\n");
				
				TimeUnit.MILLISECONDS.sleep((int)(Math.random()*1000+1000));	//to prevent user from spamming connect and disconnect buttons
								
				this.socket=new Socket(InetAddress.getByName(this.serverIPA), this.serverSP);

				this.oos = new ObjectOutputStream(socket.getOutputStream());
				this.ois = new ObjectInputStream(socket.getInputStream());
        	
				try {
					this.myInetAddress=InetAddress.getByName(this.myIPA);
				} catch (UnknownHostException e) {
					this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Cannot convert subserver's IP address to InetAddress Object!\n"
							+"Error: "+e.toString()+"\n\n");
				}
				
				
        		Vector<String> temp=new Vector<String>();
        		temp.add("subserver connect");
        		temp.add(this.myIPA);
        		temp.add(String.valueOf(this.mySP));
				this.oos.writeObject(temp);
				this.oos.flush();
				String result=(String)ois.readObject();
				if(result.equalsIgnoreCase("successful")) {
					setUI();
					this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Connection with the central server successful\n\n");
					this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] SERVER STARTED\n\n");
					
					//listen to stock buy/sell requests and changes on which stocks i am in charge of
					reqListener=new RequestListener(this.myIPA, this.mySP, this.LogsTextArea, this.StocksTextArea, this.AwaitingTransactionsTextArea, this.CompletedTransactionsTextArea);
					reqListener.listenToRequests();
				}
				else {
					subserverIsRunning.set(false);
					this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Connection with the central server not successful\n\n");
					this.oos.close();
					this.ois.close();
					this.socket.close();
					setUI();
					this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Socket closed\n\n");
				}				
			} catch (Exception e) {
				this.subserverIsRunning.set(false);
				setUI();
				this.LogsTextArea.appendText("["+dateFormat.format(new Date())+"] Connection error!\n"+e.toString()+"\n\n");
			}
		}
	
	public void stopSubserver() {
		
	}
}
